#!/bin/bash

: "${BIN_DIR:="$HOME/.local/bin"}"
: "${DOWNLOADS_DIR:="$(mktemp -d)"}"

install_base() {
	sudo apt-get update
	sudo apt-get install -y \
		apt-transport-https \
		software-properties-common \
		ca-certificates \
		curl \
		make \
		wget \
		unzip \
		gnupg-agent \
		build-essential \
		libevent-dev \
		ncurses-dev \
		libssl-dev \
		pkg-config
}

install_stuff() {
	mkdir -p ~/.config
	mkdir -p ~/.local/bin

	install_base

	# Shell Utilties
	parallelize '
        install_z
        install_jq
        install_yq
        install_bat
        install_exa
        install_fzf
        install_ripgrep
        install_fd-find
    '
	# Programming Languages
	parallelize '
        install_az
        install_go
        install_rust
        install_nodejs
    '
	# Shell Experience
	parallelize '
        install_tmux
        install_glow
        install_pipes
        install_neovim
        install_neofetch
        install_starship
        install_shellcheck
    '
	# Kubernetes Tools
	parallelize '
        install_k9s
        install_kind
        install_helm
        install_kubectl
        install_kubectx
        install_clusterctl
        install_kubebuilder
    '
}

parallelize() {
	tasks=$1
	pid_array=() # Track backgrounded pids
	for task in $tasks; do
		printf "running %s " "$task"
		eval "$task" &
		pid_array+=($!)
	done
	# Wait for pid completion
	for pid in "${pid_array[@]}"; do
		wait "${pid}" &>/dev/null
	done
}

#------------------------------------------------------------------------------#

install_az() {
	if ! command -v az &>/dev/null; then
		curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
	fi
}

install_bat() {
	: "${BAT_VERSION:="0.24.0"}"
	BAT_URL="https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION}/bat-v${BAT_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
	if ! command -v bat &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$BAT_URL" -o bat.tar.gz
		tar -xzvf bat.tar.gz
		mv "bat-v${BAT_VERSION}-x86_64-unknown-linux-gnu" bat
		mv bat "$BIN_DIR"
		popd
	fi
}

install_brew() {
	if ! command -v brew &>/dev/null; then
		CI=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	fi
}

install_clusterctl() {
	: "${CLUSTERCTL_VERSION:="1.5.3"}"
	CLUSTERCTL_URL="https://github.com/kubernetes-sigs/cluster-api/releases/download/v${CLUSTERCTL_VERSION}/clusterctl-linux-amd64"
	if ! command -v clusterctl &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$CLUSTERCTL_URL" -o clusterctl
		chmod +x clusterctl
		sudo mv clusterctl-linux-amd64 "$BIN_DIR"
		popd
	fi
}

install_docker() {
	if ! command -v docker &>/dev/null; then
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
		sudo apt-get install -y docker-ce bridge-utils docker-ce-cli containerd.io
	fi
	sudo usermod -aG docker "$USER"
	echo "'$USER' was added to the docker group. Please log out and back in for change to take effect"
}

install_eza() {
	: "${EZA_VERSION:="0.15.1"}"
	EZA_URL="https://github.com/eza-community/eza/releases/download/v${EZA_VERSION}/eza_x86_64-unknown-linux-gnu.tar.gz"
	if ! command -v eza &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$EZA_URL" -o exa.tar.gz
		tar -xzvf exa.tar.gz
		mv eza "$BIN_DIR"
		popd
	fi
}

install_fd-find() {
	: "${FD_VERSION:="8.7.1"}"
	FD_URL="https://github.com/sharkdp/fd/releases/download/v${FD_VERSION}/fd-v${FD_VERSION}-x86_64-unknown-linux-musl.tar.gz"
	if ! command -v fd &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$FD_URL" -o fd.tar.gz
		tar -xzvf fd.tar.gz
		mv "fd-v${FD_VERSION}-x86_64-unknown-linux-musl/fd" "$BIN_DIR"
		popd
	fi
}

install_fzf() {
	if ! command -v fzf &>/dev/null; then
		git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
		~/.fzf/install --all
	fi
}

install_glow() {
	: "${GLOW_VERSION="1.5.1"}"
	GLOW_URL="https://github.com/charmbracelet/glow/releases/download/v${GLOW_VERSION}/glow_${GLOW_VERSION}_Linux_x86_64.tar.gz"
	if ! command -v glow &>/dev/null; then
		pushd "$(mktemp -d)"
		curl -sSL "$GLOW_URL" -o glow.tar.gz
		tar -xzvf glow.tar.gz
		mv glow "$BIN_DIR"
		popd
	fi
}

install_go() {
	: "${GO_VERSION:="1.19.4"}"
	: "${FORCE_GO_INSTALL:=false}"
	if ! command -v go &>/dev/null || $FORCE_GO_INSTALL; then
		sudo rm -rf /usr/local/go
		wget -qc "https://golang.org/dl/go$GO_VERSION.linux-amd64.tar.gz" -O - | sudo tar -xz -C /usr/local
	fi
}

install_helm() {
	: "${HELM_VERSION:="3.10.3"}"
	curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
	chmod 700 get_helm.sh
	if [ "$HELM_VERSION" == "" ]; then
		./get_helm.sh
	else
		./get_helm.sh --version "v$HELM_VERSION"
	fi
	rm get_helm.sh
}

install_jq() {
	: "${JQ_VERSION:="1.7"}"
	JQ_URL="https://github.com/stedolan/jq/releases/download/jq-${JQ_VERSION}/jq-linux64"
	if ! command -v jq &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$JQ_URL" -o jq
		chmod +x jq
		mv jq "$BIN_DIR"
		popd
	fi
}

install_k9s() {
	: "${K9S_VERSION:="0.27.4"}"
	K9S_URL="https://github.com/derailed/k9s/releases/download/v${K9S_VERSION}/k9s_Linux_amd64.tar.gz"
	K9S_THEME_URL="https://raw.githubusercontent.com/derailed/k9s/v${K9S_VERSION}/skins/gruvbox-dark.yml"
	if ! command -v k9s &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$K9S_URL" -o k9s.tar.gz
		mv k9s "$BIN_DIR"

		mkdir -p ~/.config/k9s/
		curl -sSL "$K9S_THEME_URL" -o ~/.config/k9s/skin.yml
		if [ -f ~/.config/k9s/config.yml ]; then
			yq -i '.k9s.headless = true' ~/.config/k9s/config.yml
			yq -i '.k9s.noExitOnCtrlC = true' ~/.config/k9s/config.yml
		fi
		popd
	fi
}

install_kind() {
	: "${KIND_VERSION:="0.20.0"}"
	KIND_URL="https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-linux-amd64"
	if ! command -v kind &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$KIND_URL" -o kind
		chmod +x ./kind
		mv kind "$BIN_DIR"
		popd
	fi
}

install_kubebuilder() {
	: "${KUBEBUILDER_VERSION:=$(go env GOOS)}"
	if ! command -v kubebuilder &>/dev/null; then
		wget -qcO kubebuilder https://go.kubebuilder.io/dl/latest/${KUBEBUILDER_VERSION}/$(go env GOARCH)
		chmod +x kubebuilder && sudo mv kubebuilder /usr/local/bin/
	fi
}

install_kubectl() {
	: "${KUBERNETES_VERSION:=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)}"
	if ! command -v kubectl &>/dev/null; then
		sudo curl -L "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
		sudo chmod +x /usr/local/bin/kubectl
		kubectl version --short --client
	fi
}

install_kubectx() {
	: "${KUBECTX_VERSION:="v0.9.5"}"
	KUBECTX_URL="https://github.com/ahmetb/kubectx/releases/download/${KUBECTX_VERSION}/kubectx_${KUBECTX_VERSION}_linux_x86_64.tar.gz"
	KUBENS_URL="https://github.com/ahmetb/kubectx/releases/download/${KUBECTX_VERSION}/kubens_${KUBECTX_VERSION}_linux_x86_64.tar.gz"
	pushd "$DOWNLOADS_DIR"
	if ! command -v kubectx &>/dev/null; then
		curl -sSL "$KUBECTX_URL" -o kubectx.tar.gz
		tar -xzxf kubectx.tar.gz
		mv "kubectx_v${KUBECTX_VERSION}_linux_x86_64/kubectx" "$BIN_DIR"
	fi

	if ! command -v kubens &>/dev/null; then
		curl -sSL "$KUBENS_URL" -o kubens.tar.gz
		tar -xzxf kubens.tar.gz
		mv "kubens_v${KUBENS_VERSION}_linux_x86_64/kubens" "$BIN_DIR"
	fi
}

install_kustomize() {
	if ! command -v kustomize &>/dev/null; then
		curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
		sudo mv ./kustomize /usr/local/bin/kustomize
	fi
}

install_neofetch() {
	: "${NEOFETCH_VERSION="7.1.0"}"
	NEOFETCH_URL="https://github.com/dylanaraps/neofetch/archive/refs/tags/${NEOFETCH_VERSION}.tar.gz"
	if ! command -v neofetch &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$NEOFETCH_URL" -o "${NEOFETCH_VERSION}.tar.gz"
		tar -xzvf "${NEOFETCH_VERSION}.tar.gz"
		make -C "neofetch-${NEOFETCH_VERSION}" PREFIX="$BIN_DIR" install
		popd
	fi

	if [ ! -f ~/.config/neofetch/config.conf ]; then
		mkdir -p ~/.config/neofetch/
		ln -s ~/.files/neofetch.conf ~/.config/neofetch/config.conf
	fi
}

install_neovim() {
	: "${NEOVIM_VERSION:="0.9.0"}"
	if ! command -v nvim &>/dev/null; then
		pushd "$(mktemp -d)"
		wget -qc "https://github.com/neovim/neovim/releases/download/v${NEOVIM_VERSION}/nvim-linux64.tar.gz"
		tar -xzvf nvim-linux64.tar.gz nvim-linux64
		sudo mv nvim-linux64 /usr/local/nvim
		popd
		if [ ! -f ~/.config/nvim ]; then
			ln -s ~/.files/nvim ~/.config/nvim
		fi
	fi
}

install_nodejs() {
	: "${NODE_JS_VERSION="18.15.0"}"
	if ! command -v node &>/dev/null; then
		pushd "$(mktemp -d)"
		wget -qc "https://nodejs.org/dist/v${NODE_JS_VERSION}/node-v${NODE_JS_VERSION}-linux-x64.tar.xz"
		tar -xvf "node-v${NODE_JS_VERSION}-linux-x64.tar.xz"
		sudo mv "node-v${NODE_JS_VERSION}-linux-x64" /usr/local/nodejs
		popd
	fi
}

install_pipes() {
	: "${PIPES_VERSION:="v1.3.0"}"
	PIPES_URL="https://github.com/pipeseroni/pipes.sh/releases/tag/v${PIPES_VERSION}.tar.gz"
	if ! command -v pipes.sh &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$PIPES_URL" -o "pipes-v${PIPES_VERSION}.tar.gz"
		tar -xzvf "pipes-v${PIPES_VERSION}.tar.gz"
		make -C "pipes.sh-$PIPES_VERSION" PREFIX="$BIN_DIR" install
		popd
	fi
}

install_pyenv() {
	if ! command -v pyenv &>/dev/null; then
		curl -s -S -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
	fi
}

install_python() {
	install_brew
	install_pyenv

	export PYENV_ROOT=~/.pyenv
	export PATH="$PYENV_ROOT/bin:$PATH"
	eval "$(pyenv init --path)"
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
	: "${PYTHON_VERSION:="3.10.2"}"
	pyenv install "$PYTHON_VERSION"
	pyenv global "$PYTHON_VERSION"
}

install_ripgrep() {
	: "${RIPGREP_VERSION:="13.0.0"}"
	RIPGREP_URL="https://github.com/BurntSushi/ripgrep/releases/download/${RIPGREP_VERSION}/ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl.tar.gz"
	if ! command -v rg &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$RIPGREP_URL" -o "ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl.tar.gz"
		tar -xzvf "ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl.tar.gz"
		mv "ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl/rg" "$BIN_DIR"
		popd
	fi
}

install_rust() {
	: "${COOL_CARGO:=false}"
	if ! command -v rustup &>/dev/null; then
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -q
		source ~/.cargo/env
	fi
	if $COOL_CARGO; then
		cargo install code-minimap tmux-sessionizer
		tms config --paths "$HOME"
	fi
}

install_shellcheck() {
	: "${SHELLCHECK_VERSION:="0.9.0"}"
	SHELLCHECK_URL="https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VERSION}/shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz"
	if ! command -v shellcheck &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$SHELLCHECK_URL" -o "shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz"
		tar -xvf "shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz"
		mv "shellcheck-v${SHELLCHECK_VERSION}/shellcheck" "$BIN_DIR"
		popd
	fi
}

install_starship() {
	: "${STARSHIP_VERSION:="1.16.0"}"
	STARSHIP_URL="https://github.com/starship/starship/releases/download/v${STARSHIP_VERSION}/starship-x86_64-unknown-linux-musl.tar.gz"
	if ! command -v starship &>/dev/null; then
		pushd "${DOWNLOADS_DIR}"
		curl -ssL "$STARSHIP_URL" -o starship.tar.gz
		tar -xvf starship.tar.gz
		mv starship "$BIN_DIR"
		popd
	fi

	if [ ! -f ~/.config/starship.toml ]; then
		ln -s ~/.files/starship.toml ~/.config/starship.toml
	fi
}

install_tmux() {
	: "${TMUX_VERSION:="3.3a"}"
	TMUX_URL="https://github.com/tmux/tmux/releases/download/${TMUX_VERSION}/tmux-${TMUX_VERSION}.tar.gz"
	if command -v tmux; then
		pushd "$DOWNLOADS_DIR"
		curl -sSL "$TMUX_URL" -o "tmux-${TMUX_VERSION}.tar.gz"
		tar -xzvf "tmux-${TMUX_VERSION}.tar.gz"
		pushd "tmux-${TMUX_VERSION}"
		./configure --prefix "$BIN_DIR"/tmux && make
		make install
		popd

		# Get the tmux plugin manager
		git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
		popd
	fi

	if [ ! -f ~/.tmux.conf ]; then
		ln -s ~/.files/tmux.conf ~/.tmux.conf
	fi
}

install_vivid() {
	: "${VIVID_VERSION:="0.9.0"}"
	VIVID_URL="https://github.com/sharkdp/vivid/releases/download/v${VIVID_VERSION}/vivid-v${VIVID_VERSION}-x86_64-unknown-linux-musl.tar.gz"
	if ! command -v vivid; then
		pushd "$(mktemp -d)"
		curl -sSL "$VIVID_URL" -o "vivid-v${VIVID_VERSION}-x86_64-unknown-linux-musl.tar.gz"
		tar -xzvf "vivid-v${VIVID_VERSION}-x86_64-unknown-linux-musl.tar.gz"
		mv "vivid-v${VIVID_VERSION}-x86_64-unknown-linux-musl/vivid" "$BIN_DIR"
		popd
	fi
}

install_yq() {
	: "${YQ_VERSION:="4.35.2"}"
	YQ_URL="https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64"
	if ! command -v yq &>/dev/null; then
		curl -sSL "$YQ_URL" -o yq
		chmod +x yq
		mv yq "$BIN_DIR"
	fi
}

install_zoxide() {
	: "${ZOXIDE_VERSION:="0.9.2"}"
	ZOXIDE_URL="https://raw.githubusercontent.com/ajeetdsouza/zoxide/v${ZOXIDE_VERSION}/install.sh"
	if ! command -v z &>/dev/null; then
		pushd "$DOWNLOADS_DIR"
		curl -sS "$ZOXIDE_URL" | bash
		popd
	fi
}
